@using KrasivoeNazvanie.DB
<div>
    <h3>Список задач</h3>
    <input type="text" placeholder="Введите задачу" @bind-value="newTaskName" />
    <button @onclick="()=>AddTask()">Добавить</button>

    <div>
        <button @onclick="()=> LoadTasks(TaskFilter.All)">Все задачи</button>
        <button @onclick="()=> LoadTasks(TaskFilter.Completed)">Выполненные</button>
        <button @onclick="()=> LoadTasks(TaskFilter.NotCompleted)">Не выполненные</button>
    </div>

    <ul>
        @if (tasks.Count > 0)
        {
            @foreach (var item in tasks)
            {
                <li>
                    <input type="checkbox" value="@item.IsCompleted" @onchange="(s=> UpdateTask(item, s))" />
                    <span style="text-decoration: @(item.IsCompleted? "line-through" : "none")">@item.Drscription</span>
                    <button @onclick="()=>RemoveTask(item)">Удалить</button>
                </li>
            }
        }
    </ul>

</div>


@code {
    ToDoListDbContext context;
    string newTaskName = "";
    List<ToDoItem> tasks = new();



    protected override void OnInitialized()
    {
        base.OnInitialized();
        context = new();
        LoadTasks(TaskFilter.All);
    }

    void LoadTasks(TaskFilter filter)
    {
        tasks = filter switch
        {
            TaskFilter.Completed => context.ToDoItems.Where(t => t.IsCompleted).ToList(),
            TaskFilter.NotCompleted => context.ToDoItems.Where(t => !t.IsCompleted).ToList(),
            TaskFilter.All => context.ToDoItems.ToList()
        };
    }

    async void AddTask()
    {
        if(!string.IsNullOrEmpty(newTaskName))
        {
            var new_task = new ToDoItem()
                {
                    IsCompleted=false,
                    Drscription = newTaskName
                };
            context.ToDoItems.Add(new_task);
            await context.SaveChangesAsync();
            newTaskName = string.Empty;
            LoadTasks(TaskFilter.All);
        }
    }

    async void UpdateTask(ToDoItem item, ChangeEventArgs e)
    {
        if (e.Value == null)
            return;
        item.IsCompleted = (bool)e.Value;
        context.ToDoItems.Update(item);
        await context.SaveChangesAsync();
        LoadTasks(TaskFilter.All);
    }

    async void RemoveTask(ToDoItem item)
    {
        context.ToDoItems.Remove(item);
        await context.SaveChangesAsync();
        LoadTasks(TaskFilter.All);
    }

    enum TaskFilter
    {
        All,
        Completed,
        NotCompleted
    }
}
